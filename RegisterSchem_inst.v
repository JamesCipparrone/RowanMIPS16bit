// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.


// Generated by Quartus II 64-Bit Version 13.0 (Build Build 232 06/12/2013)
// Created on Wed Jun 06 22:03:24 2018

RegisterSchem RegisterSchem_inst
(
	.select(select_sig) ,	// input [3:0] select_sig
	.Write(Write_sig) ,	// input  Write_sig
	.clock(clock_sig) ,	// input  clock_sig
	.rst(rst_sig) ,	// input  rst_sig
	.data(data_sig) ,	// input [15:0] data_sig
	.selecta(selecta_sig) ,	// input [3:0] selecta_sig
	.selectb(selectb_sig) ,	// input [3:0] selectb_sig
	.a(a_sig) ,	// output [15:0] a_sig
	.b(b_sig) ,	// output [15:0] b_sig
	.regz(regz_sig) ,	// output [15:0] regz_sig
	.regy(regy_sig) ,	// output [15:0] regy_sig
	.regx(regx_sig) ,	// output [15:0] regx_sig
	.regw(regw_sig) ,	// output [15:0] regw_sig
	.regv(regv_sig) ,	// output [15:0] regv_sig
	.regu(regu_sig) ,	// output [15:0] regu_sig
	.regt(regt_sig) ,	// output [15:0] regt_sig
	.regs(regs_sig) ,	// output [15:0] regs_sig
	.regr(regr_sig) ,	// output [15:0] regr_sig
	.regq(regq_sig) ,	// output [15:0] regq_sig
	.regp(regp_sig) ,	// output [15:0] regp_sig
	.rego(rego_sig) ,	// output [15:0] rego_sig
	.regn(regn_sig) ,	// output [15:0] regn_sig
	.regm(regm_sig) ,	// output [15:0] regm_sig
	.regl(regl_sig) ,	// output [15:0] regl_sig
	.regk(regk_sig) 	// output [15:0] regk_sig
);

